from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from components.keyboards.quiz import generate_quiz_keyboard
from utils.quiz_data import quiz_data
from database import get_db_session
from components.database.quiz_repository import clear_user_answers, get_quiz_index, update_quiz_index, save_quiz_result, get_correct_answers_count

router = Router()

@router.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@router.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    await new_quiz(message)

async def new_quiz(message: types.Message):
    user_id = message.from_user.id
    async with get_db_session() as session:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        await clear_user_answers(session, user_id)
        await update_quiz_index(session, user_id, 0)
        await session.commit()
    
    await get_question(message, user_id)

async def get_question(message: types.Message, user_id: int):
    async with get_db_session() as session:
        current_question_index = await get_quiz_index(session, user_id)
    
    if current_question_index < len(quiz_data):
        kb = generate_quiz_keyboard(current_question_index)
        await message.answer(f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(quiz_data)}:\n{quiz_data[current_question_index]['question']}", reply_markup=kb)
    else:
        await message.answer("–ö–≤–∏–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /quiz.")

async def next_question_or_finish(message: types.Message, user_id: int):
    async with get_db_session() as session:
        current_question_index = await get_quiz_index(session, user_id)
        current_question_index += 1
        await update_quiz_index(session, user_id, current_question_index)

    if current_question_index < len(quiz_data):
        await get_question(message, user_id)
    else:
        await finish_quiz(message, user_id)

async def finish_quiz(message: types.Message, user_id: int):
    async with get_db_session() as session:
        total_questions = len(quiz_data)
        correct_answers = await get_correct_answers_count(session, user_id)
        username = message.from_user.username or message.from_user.first_name
        
        await save_quiz_result(session, user_id, username, total_questions, correct_answers)
    
    score = int((correct_answers / total_questions) * 100)
    
    await message.answer(
        f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions}\n"
        f"üèÜ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {score}%\n\n"
        f"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats\n"
        f"–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leaderboard"
    )